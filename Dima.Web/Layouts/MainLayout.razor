@inherits LayoutComponentBase


<MudThemeProvider
    @ref="_mudThemeProvider"
    @bind-IsDarkMode="@_isDarkMode" 
    Theme="ConfigurationHelpers.Theme"/>
<MudSnackbarProvider />

<AuthorizeView>
    <Authorized>
        <MudLayout>
            <MudAppBar>
                <MudIconButton 
                    Icon="@Icons.Material.Filled.Menu"
                    Color="Color.Inherit" 
                    Edge="Edge.Start"
                    OnClick="ToggleDrawer" />
                Dima
                <MudSpacer />
                <MudText Typo="Typo.caption">
                    @context.User.Identity?.Name
                </MudText>
                <MudSwitch 
                    Color="Color.Inherit"
                    @bind-Value="@_isDarkMode"
                    T="bool"
                    Class="ma-4" 
                    ThumbIcon="@Icons.Material.TwoTone.Lightbulb" />
            </MudAppBar>

            <MudDrawer @bind-Open="@_isDrawerOpened">
                <h3>Nav Menu</h3>
            </MudDrawer>
            <MudMainContent>
                <MudContainer>
                    @Body
                </MudContainer>
            </MudMainContent>
        </MudLayout>
    </Authorized>
    <NotAuthorized>
        <LoginRedirect />
    </NotAuthorized>
</AuthorizeView>

@code{
    // Implementando obter o tema pelo sistema operacional e pela preferencia
    private bool _isDrawerOpened = true;
    private bool _isDarkMode = true;
    private MudThemeProvider _mudThemeProvider = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged(); // Avisa ao blazor que teve alteração na tela
        return Task.CompletedTask;
    }

    private void ToggleDrawer() =>
        _isDrawerOpened = !_isDrawerOpened;

}
